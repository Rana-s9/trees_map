<script>
  let map;
  let marker;

  function initAutocomplete() {
    const addressInput = document.getElementById('address-input');
    const placeNameInput = document.getElementById('place-name');
    const autocomplete = new google.maps.places.Autocomplete(addressInput);

    map = new google.maps.Map(document.getElementById("map"), {
      center: { lat: 35.681236, lng: 139.767125 }, // 東京駅初期値
      zoom: 13,
    });

    autocomplete.addListener('place_changed', function () {
      const place = autocomplete.getPlace();

      if (!place.geometry) {
        alert("場所が見つかりませんでした。");
        return;
      }

      const location = place.geometry.location;
      const lat = location.lat();
      const lng = location.lng();

      // 地図の中心を移動
      map.setCenter(location);

      // マーカー再設置
      if (marker) marker.setMap(null);
      marker = new google.maps.Marker({ map: map, position: location });

      // 緯度経度の表示
      document.getElementById("lat-value").textContent = lat.toFixed(6);
      document.getElementById("lng-value").textContent = lng.toFixed(6);

      // 緯度経度を hidden フィールドに保存（Railsに送信）
      setHiddenField("fav_place[latitude]", "lat", lat);
      setHiddenField("fav_place[longitude]", "lng", lng);

      // 選択された場所の名前を「場所名」フィールドに自動入力
      if (place.name && placeNameInput) {
        placeNameInput.value = place.name;
      }
      
      getXYFromLatLng(location);
    });

    function setHiddenField(name, id, value) {
      let input = document.getElementById(id);
      if (!input) {
        input = document.createElement("input");
        input.type = "hidden";
        input.name = name;
        input.id = id;
        addressInput.form.appendChild(input);
      }
      input.value = value;
    }

    function getXYFromLatLng(latLng) {
    const scale = Math.pow(2, map.getZoom());
    const projection = map.getProjection();

    const worldCoordinate = projection.fromLatLngToPoint(latLng);
    const pixelCoordinate = {
      x: worldCoordinate.x * scale,
      y: worldCoordinate.y * scale
    };

    // hiddenフィールドがあれば代入、なければ生成
    setHiddenField("fav_place[fav_x]", "fav_x", pixelCoordinate.x);
    setHiddenField("fav_place[fav_y]", "fav_y", 0); // 中央に配置
    setHiddenField("fav_place[fav_z]", "fav_z", pixelCoordinate.y);
    }
  }
</script>

<!-- Google Maps 読み込み -->
<script
  async
  defer
  src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAPS_API'] %>&libraries=places&callback=initAutocomplete">
</script>
